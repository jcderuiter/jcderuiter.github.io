<!doctype html>
<html lang="nl">
<head>
<meta http-equiv="expires" content="now"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="version" content="0.0.0"/>
<title>closures</title>
<!--
<script type="text/x-mathjax-config">
   MathJax.Hub.Config({ tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']], processEscapes: true},
                        TeX:     {extensions: ["extpfeil.js"]}
                     });
</script>
<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-AMS_CHTML">
// http://docs.mathjax.org/en/latest/start.html
</script>
-->

<link rel="stylesheet" href="jcr_layout.css" type="text/css"/>

<link rel="stylesheet" href="jcr_listing.css" type="text/css"/>
<script src="jcr_listing.js"></script>

<link rel="stylesheet" href="jcr_sections.css" type="text/css"/>
<script src="jcr_sections.js"></script>

<link rel="stylesheet" href="jcr_info.css" type="text/css"/>

<link rel="stylesheet" href="jcr_references.css" type="text/css"/>
<script src="jcr_references.js"></script>

<link rel="stylesheet" href="jcr_copy.css" type="text/css"/>
<script src="jcr_copy.js"></script>

<link rel="stylesheet" href="jcr_math.css" type="text/css"/>

<style>
*
{
   box-sizing: border-box;                       /* */
}

body
{
   font-family: sans-serif;                      /* */
   line-height: 1.6;                             /* */
}

code
{
   font-size: larger;                            /* */
}

a
{
   text-decoration: none;                        /* */
   transition:      .5s;                         /* */
}
a, a:visited
{
   color: inherit;                               /* */
}
a:hover
{
   color: hsl(315, 100%,  50%);                  /* */
}

.center { text-align: center; }                  /* */
.nowrap { white-space: nowrap; }                 /* */

.examples
{
   display:               grid;                  /* */
   grid-template-columns: auto auto;             /* */
}

.examples button
{
   color:  hsl(285, 100%, 100%);                 /* */
   cursor: pointer;                              /* */
   width:  4rem;                                 /* */

   font-family:  sans-serif;                     /* */
   font-variant: small-caps;                     /* */

   border-radius: 10%;                           /* */
}

.examples li.reset
{
   list-style-type: disc;                        /* */
   margin-top:      4rem;                        /* */
}

.examples li.reset button
{
   color: initial;                               /* */
}

figcaption
{
   font-family: sans-serif;                      /* */
   font-size:   smaller;                         /* */
}
</style>

<script>
'use strict';
const closures_js_object = {};
document.addEventListener('DOMContentLoaded', () => closures_js_object.onload(), false);

(function(api)
{
   api.onload = function()
   {
      try
      {
         setupExamples();
      }  catch(err) { console.log('oops', err) }

   }

   const setupExamples = function()
   {
      example1();
      example2();
      example3();
      example4();
      example5();
   }

   const example1 = function()
   {
      let ol = document.querySelector('#xmp1');
      if (ol)
      {
         ol.innerHTML = '';

         let color = ['yellow', 'green', 'blue', 'red'];
         let bg;

         for (let i = 0; i < 4; i++)
         {
            bg = color[i];

            let li     = document.createElement('li');
            let button = document.createElement('button');

            button.innerHTML    = bg;

            button.onclick = function() { button.style.backgroundColor = bg; };

            li.appendChild(button);
            ol.appendChild(li);
         }

         addReset2Example(ol, example1);
      }
   }

   const example2 = function()
   {
      let ol = document.querySelector('#xmp2');
      if (ol)
      {
         ol.innerHTML = '';

         let color = ['yellow', 'green', 'blue', 'red'];

         for (let i = 0; i < 4; i++)
         {
            let bg = color[i];

            let li     = document.createElement('li');
            var button = document.createElement('button');

            button.innerHTML    = bg;

            button.onclick = function() { button.style.backgroundColor = bg; };

            li.appendChild(button);
            ol.appendChild(li);
         }

         addReset2Example(ol, example2);
      }
   }

   const example3 = function()
   {
      let ol = document.querySelector('#xmp3');
      if (ol)
      {
         ol.innerHTML = '';

         let color = ['yellow', 'green', 'blue', 'red'];
         let bg;

         for (let i = 0; i < 4; i++)
         {
            bg = color[i];

            let li     = document.createElement('li');
            let button = document.createElement('button');

            button.innerHTML    = bg;

            button.onclick = (function(btn, bgclr) { return function() { btn.style.backgroundColor = bgclr; }})(button, bg);

            li.appendChild(button);
            ol.appendChild(li);
         }

         addReset2Example(ol, example3);
      }
   }

   const example4 = function()
   {
      var ol = document.querySelector('#xmp4');
      if (ol)
      {
         ol.innerHTML = '';

         var color = ['yellow', 'green', 'blue', 'red'];

         for (let i = 0; i < 4; i++)
         {
            var li     = document.createElement('li');
            let button = document.createElement('button');

            button.innerHTML    = color[i];

            button.onclick = () => { button.style.backgroundColor = color[i]; };

            li.appendChild(button);
            ol.appendChild(li);
         }

         addReset2Example(ol, example4);
      }
   }

   const example5 = function()
   {
      var ol = document.querySelector('#xmp5');
      if (ol)
      {
         ol.innerHTML = '';

         let color = ['yellow', 'green', 'blue', 'red'];

         for (var i = 0; i < 4; i++)
         {
            var li     = document.createElement('li');
            let button = document.createElement('button');

            button.innerHTML    = color[i];

            button.onclick = () => { button.style.backgroundColor = color[i] };

            li.appendChild(button);
            ol.appendChild(li);
         }

//       color.push('cyan');
         color.push('magenta');

         addReset2Example(ol, example5);
      }
   }

   const addReset2Example = function(ol, example)
   {
         let resetli           = document.createElement('li');
         resetli.className     = 'reset';
         let resetbutton       = document.createElement('button');
         resetbutton.innerHTML = 'reset';
         resetbutton.onclick   = example;
         resetli.appendChild(resetbutton);
         ol.appendChild(resetli);
   }

})(closures_js_object);
</script>
</head>
<body>

<div class="jcr-layout">

<div class="jcr-layout-header"></div> <!-- jcr-layout-header -->
<div class="jcr-layout-left">
<ul class="jcr-sections" id="jcr-sections"></ul>
</div> <!-- jcr-layout-left -->

<div class="jcr-layout-main">

Een <i><b>closure</b></i> is een structuur bestaande uit een
<code><b>function</b></code> en een <i>environment</i> met <b>free variables</b></i>.
Free variables zijn variabelen die door de <code>function</code> gebruikt
worden, maar niet binnen de <code>function</code> gedefinieerd zijn en ook
geen <i>parameter</i> van de <code>function</code> zijn.


<h4 class="jcr-section" id="section_lex">Lexical scope</h4>

JavaScript werkt net als de meeste andere programmeertalen met
<i>lexical</i>, of <i>static scope</i>.
<br/>
Lexical scope wil zeggen dat de plek in de code waar iets
gedefinieerd is bepaalt wat z'n scope is.
Dat is misschien beter te begrijpen aan de hand van een voorbeeld:
<textarea class="jcr-listing">
let x = 'x: global scope';
let y = 'y: global scope';

function foo() { console.log(x) }

function bar()
{
   let x = 'x: bar scope';
   console.log(x);                     // 'x: bar scope'
   foo();                              // 'x: global scope'
   console.log(y);                     // 'y: global scope'
}

bar();
</textarea>
Binnen de <i>function</i> <code>bar</code> wordt, in regel 8,
een variabele <code>x</code> gedefinieerd
die dezelfde naam heeft als een variabele in
de context waarin <code>bar</code>
zelf is gedefinieerd.
Dat heeft tot gevolg dat deze <code>x</code> uit regel 1
binnen <code>bar</code> onzichtbaar geworden is. Dat heet <i>shadowing</i>.
<br/>
Een <code>function</code> heeft als het ware een eigen <i>environment</i> met namen
die bestaat uit de environment waarin de <code>function</code> zelf gedefinieerd is plus
namen die binnen de <code>function</code> gedefinieerd worden, en waarbij shadowing van
toepassing is. Dat is de lexical scope van de <code>function</code>.
<br/>
De variabele <code>y</code> uit regel 2 is in <code>bar</code> dus beschikbaar,
met de waarde die hij in de 'bovenliggende' environment heeft.
Omdat <code>y</code> niet lokaal in <code>bar</code> gedefinieerd is,
niet "gebonden" aan <code>bar</code>, wordt hij ook wel een <i>free variable</i>
genoemd.
<br/>
Wat in <code>bar</code> voor <code>y</code> geldt,
geldt in <code>foo</code> voor <code>x</code>:
<code>foo</code> heeft in zijn eigen environment geen <code>x</code>,
maar kent wel de <code>x</code> uit de bovenliggende environment.
<br/>
Maar dat is dus niet de <code>x</code> uit de <code>bar</code> environment,
ook niet als <code>foo</code> vanuit <code>bar</code> wordt aangeroepen.
<br/>
(Tegenover static scope staat <i>dynamic</i> scope;
in <i>Perl</i> kun je, waar je normaal gesproken in <code>bar</code> een
<code>my $x</code> zou maken,
door middel van <code>local $x</code> kiezen
voor een dynamic scope voor <code>$x</code>:
gedurende de uitvoering van <code>bar</code>
heeft <code>$x</code> dan overal de waarde uit <code>bar</code>,
ook in <code>foo</code>.)
<br/>
Een <code>function</code> die, zoals dus in JavaScript, de environment waarin
hij is gedefinieerd gebruikt voor de free variables wordt een
<i>closure</i>
<a href="#ref_mdnclosures" class="jcr-reference"></a>
genoemd. In plaats van "gebruikt" kun je beter "afvangt"
zeggen, omdat de environment waarin de <code>function</code> gedefinieerd is
op het moment van uitvoeren al verdwenen zou kunnen zijn, ware het niet dat
hij ten behoeve van de closure bewaard blijft. Meer hierover verderop bij het
<i>"upwards funarg problem"</i>.

<h4 class="jcr-section" id="section_fcf">First-class functions</h4>

In JavaScript kun je een <code>function</code> als "data" in een
variabele opslaan, als argument meegeven en als <code>return</code> waarde
van een andere <code>function</code> terugkrijgen.
Dat heet <i>first-class function</i>.
<br/>
Een argument voor een <code>function</code> dat zelf een <code>function</code>
is wordt wel <i>funarg</i>
<a href="#ref_wikifunarg" class="jcr-reference"></a>
genoemd.

<br/>
Omdat een JavaScript <code>function</code> een closure is worden de
free variables in een funarg aanroep uit de lexical scope gehaald.
<br/>
Dit staat bekend als de <i>downward funarg problem</i>, waar de vraag is
of de waarden van free variables uit de static (lexical) scope
(de environment van de <i>callee</i>, de aangeroepen <code>function</code>)
of uit de dynamic scope (de environment van de <i>caller</i>, de aanroepende
<code>function</code>) komen.

<textarea class="jcr-listing jcr-listing-nolinenrs jcr-listing-table">
let x = 'x: global scope';

function foo()
{
   console.log(x);
}

function bar(funarg)
{
   let x = 'x: bar scope';

   funarg();
}

bar(foo);                              // 'x: global scope'
</textarea>

Maar nu het <i>upward funarg problem</i>, dat optreedt als je een
<code>function</code> als <code>return</code> waarde van een andere
<code>function</code> hebt.
In onderstaand voorbeeld is dat het geval (overigens wordt hier ook het
derde kenmerk van <i>first-class functions</i> gebruikt:
een <code>function</code> als data
(de waarde van de variabele <code>foo</code> is een <code>function</code>):

<textarea class="jcr-listing jcr-listing-nolinenrs jcr-listing-table">
function bar()
{
   let x = 'x: bar scope';

   return function() { console.log(x); }
}

let x = 'global';

let foo = bar();   // dus: foo = function() { console.log(x) }, maar wat is x?
                   // is bar's local x verdwenen? nee:
foo();             // 'x: bar scope'
</textarea>

Bij de uitvoering van <code>bar</code> wordt zoals altijd een
nieuwe environment gemaakt die normaal gesproken niet meer nodig is
en zou verdwijnen als <code>bar</code> uitgevoerd is.
Maar de in <code>function</code> die in de <code>return</code> waarde van
<code>bar</code> staat is de variabele <code>x</code> uit de environment
van <code>bar</code> een <i>free variable</i> en dus wordt ten behoeve van
deze closure de environment van <code>bar</code> bewaard.
<br/>
<br/>
Bij opeenvolgende aanroepen van een <code>function</code> worden nieuwe
environments gemaakt, wat leidt tot verschillende closures. In het volgende
voorbeeld hebben <code>incr</code> en <code>decr</code> elk een eigen
closure, terwijl <code>baz.incr</code> en <code>baz.decr</code> een
gedeelde closure hebben:

<textarea class="jcr-listing">
function bar(increment)
{
   let counter = 0;

   if (increment)
   {
      return function() { console.log(++counter); }
   }
   else
   {
      return function() { console.log(--counter); }
   }
}

function foo()
{
   let counter = 0;

   return {
             incr() { console.log(++counter); },
             decr() { console.log(--counter); }
          }
}

let incr = bar(true);
let decr = bar(false);
let baz  = foo();

incr();                    // 1
incr();                    // 2
decr();                    // -1

baz.incr()                 // 1
baz.incr()                 // 2
baz.decr()                 // 1
</textarea>
In regel 25 wordt <code>bar</code> uitgevoerd waardoor er een closure met
een <code>counter</code> variabele gemaakt wordt. Die <code>counter</code>
wordt in regel 29 en 30 gebruikt.
<br/>
In regel 26 wordt een ander closure, met een eigen <code>counter</code>
variabele gemaakt, die in regel 31 gebruikt wordt.
<br/>
In regel 27 wordt <code>foo</code> uitgevoerd waardoor er een closure gemaakt
wordt met daarin een variabele die alweer <code>counter</code> genoemd wordt.
Deze closure, en dus deze variabele, wordt in de regels 33, 34 en 35 gebruikt.

<h4 class="jcr-section" id="section_dc">Dynamic scope: this</h4>

Er is een uitzondering op de static scope in JavaScript: het <i><code>this</code></i>
object. Een <code>function</code> krijgt impliciet een extra parameter
mee: een object genaamd <code>this</code>.
<br/>
Wat <code>this</code> is hangt af van de manier waarop de <code>function</code>
wordt aangeroepen.
Als hetgeen dat v&ograve;&ograve;r de <code>()</code> staat
een <i>property</i> van een <i>base object</i> is, zoals in
<code>foo.bar()</code>,
waar <code>bar</code> een property van het base object <code>foo</code> is,
dan wordt <code>this</code> het base object.
<br/>
In alle andere gevallen krijgt <code>this</code> de waarde <code>undefined</code>.
(Dat wil zeggen, in <i>strict mode</i>
<a href="#ref_mdnstrict" class="jcr-reference"></a>, in
<i>sloppy mode</i> wordt <code>this</code> het <i>globale object</i>;
in een browser is dat <code>window</code>.)
<br/>
Dat klinkt eenvoudig, maar deze voorbeelden laten zien dat het soms lastig
kan zijn:

<textarea class="jcr-listing">
function foo() { console.log(this); }

foo();                                            // undefined/global

// een beetje buiten de scope van dit verhaal, een andere schrijfwijze voor het 'ding' foo:
console.log(foo.prototype.constructor === foo);   // true

foo.prototype.constructor();                      // foo {}   (dit is het object foo.prototype)

let bar = { baz: foo };                           // NB: bar.baz === foo
bar.baz();                                        // { baz: [Function: foo] }  (het bar object)

let qux = bar.baz;                                // weer: qux === foo
qux();                                            // undefined/global

// voor de () kan iets binnen een grouping operator () staan en die levert een waarde
// (weliswaar refererend aan de functie) maar dat is geen object.property

(false || bar.baz)();                             // undefined/global
(bar.baz = bar.baz)();                            // undefined/global
</textarea>
In regel 3, 8, 11, 14, 19 en 20 wordt dus steeds <i>dezefde</i> <code>function</code>
aangeroepen, maar de manier waarop de aanroep <i>gecodeerd</i> is bepaalt
wat het <code>this</code> object is.
<br/>
<br/>
JavaScript kent ook het concept <i>anonieme</i>
<code>function</code>, die heeft bij uitvoering ook een <code>undefined</code>
c.q. global <code>this</code> object:
<textarea class="jcr-listing jcr-listing-nolinenrs jcr-listing-table">
(function () { console.log(this); })();           // undefined/global
</textarea>
JavaScript kent de <i>arrow</i> notatie voor een <code>function</code>
waarvan je alleen de return waarde wilt hebben: <code>(a, b) => c</code>
staat voor <code>function(a, b) { return c }</code> (bij &eacute;&eacute;n
parameter mag je zelfs de haakjes weglaten: <code>a => c</code>).
<br/>
Bij een arrow <code>function</code> wordt echter <i>geen</i> <code>this</code>
object gemaakt.
Als je dan <code>this</code> gebruikt dan is het het <code>this</code> object
uit de <i>executing environment</i>.
<textarea class="jcr-listing">
this.x = 'global x';                                 // NB: in browser is this.x hetzelfde als x,
                                                     // in nodejs niet

let foo = {
             x:   'foo x',
             bar: function() { return this.x },
             baz: () => this.x                       // bar in arrow notatie
          }

console.log(foo.bar());                              // 'foo x'
console.log(foo.baz());                              // 'global x' (ook in strict mode)
</textarea>


<h4 class="jcr-section" id="section_xmp">Voorbeelden in een event handler</h4>

Je kunt met closures makkelijk de fout in gaan.
Als je bijvoorbeeld <i>event handlers</i> maakt die je de waarde van variabelen
wilt meegeven dan moet je rekening houden met closures. Om dat te illustreren
volgt hier een stukje code waarin dynamisch een lijstje met HTML
button elementen gemaakt wordt die een <i>onclick handler</i>
krijgen waaraan een variabele meegegeven wordt; de bedoeling is om elke botton
bij een muisklik aan de hand van die variabele een achtergrondkleur te geven.

<figure>
<div class="examples">

<textarea class="jcr-listing">
function setupButtonList()
{
   let ol = document.querySelector('#theList');
   let color = ['yellow', 'green', 'blue', 'red'];
   let bg;

   for (let i = 0; i < 4; i++)
   {
      bg = color[i];

      let li     = document.createElement('li');
      let button = document.createElement('button');

      button.innerHTML = bg;

      button.onclick   = function() { button.style.backgroundColor = bg; };

      li.appendChild(button);
      ol.appendChild(li);
   }
}
</textarea>

<ol id="xmp1"></ol>

</div>
<figcaption>Voorbeeld 1 - variabele in de closure kan wijzigen</figcaption>
</figure>

Dit gaat dus niet goed, alle buttons worden rood na een muisklik.
<br/>
Wat is er mis? De <code>function</code> in regel 16 heeft een <i>free variable</i>
<code>bg</code> die dus in de closure komt. Maar als de <code>for</code> loop
uit regel 7 klaar is heeft <code>bg</code> de waarde <code>'red'</code>.
En welke button je ook aanklikt, de achtergrondkleur wordt wat er
in <code>bg</code> staat, rood dus.
<br/>
Als <code>bg</code> <i>binnen</i> de <code>for</code> loop was gedeclareerd:
<code><b>let</b> bg = color[i];</code> in regel 9,
dan zou het wel goed gaan omdat er
dan bij elke iteratie een nieuwe variabele gemaakt wordt, weliswaar steeds met
de naam <code>bg</code> maar wel steeds een nieuwe, waardoor elke
closure een eigen variabele <code>bg</code> krijgt die niet van waarde verandert.
<br/>
In de <code>function</code> in regel 16 is <code>button</code> ook een
free variable. Maar die wordt dus vier keer opnieuw gemaakt, binnen de
<code>for</code> loop, in regel 12.
Belangrijk is ook dat hij gedeclareerd is met <code><i>let</i></code>.
Als het een <code><i>var</i></code> zou zijn dan is z'n <i>scope</i> niet
de <code>for</code> loop, maar de <i>setupButtonList</i>
<code>function</code>. Hieronder zie je wat voor een effect dat zou hebben:

<figure>
<div class="examples">

<textarea class="jcr-listing">
function setupButtonList()
{
   let ol = document.querySelector('#theList');
   let color = ['yellow', 'green', 'blue', 'red'];


   for (let i = 0; i < 4; i++)
   {
      let bg = color[i];

      let li     = document.createElement('li');
      var button = document.createElement('button');

      button.innerHTML = bg;

      button.onclick   = function() { button.style.backgroundColor = bg; };

      li.appendChild(button);
      ol.appendChild(li);
   }
}
</textarea>

<ol id="xmp2"></ol>
</div>
<figcaption>Voorbeeld 2 - let op de scope van een <code>var</code></figcaption>
</figure>

In <i>elke</i> closure zit nu &eacute;&eacute;n en dezelfde
<code>var button</code> en die bevat uiteindelijk
het vierde HTML button element.
<br/>
<br/>

Deze potenti&euml;le problemen kunnen worden omzeild door een speciale
closure te maken waarin je de free variables op een gecontroleerde manier
verwerkt. Hieronder staat in regel 16-20 een anonieme <code>function</code>
die ook meteen wordt uitgevoerd. Deze <code>function</code> heeft als
<code>return</code> waarde de <code>function</code> die we als <code>onclick</code>
handler willen hebben.

<figure>
<div class="examples">

<textarea class="jcr-listing">
function setupButtonList()
{
   let ol = document.querySelector('#theList');
   let color = ['yellow', 'green', 'blue', 'red'];
   let bg;

   for (let i = 0; i < 4; i++)
   {
      bg = color[i];

      let li     = document.createElement('li');
      var button = document.createElement('button');

      button.innerHTML = bg;

      button.onclick   = (function(btn, bgclr)
                          {
                             return function() { btn.style.backgroundColor = bgclr; }
                          }
                         )(button, bg);

      li.appendChild(button);
      ol.appendChild(li);
   }
}
</textarea>

<ol id="xmp3"></ol>
</div>
<figcaption>Voorbeeld 3 - veilige closure</figcaption>
</figure>

De variabelen
<code>btn</code> en <code>bgclr</code> zijn free variables
in de scope van regel 18, maar <i>niet</i> in de scope van regel 16.
In regel 16 zijn ze <i>parameters</i> van de
<code>function</code> en als zodanig lokale variabelen.
<br/>
Als zijnde parameters kun je ze elke naam geven die je wilt, zelfs
<code>button</code> en <code>bg</code>. Dat is verwarrend maar het kan wel,
is een vorm van <i>shadowing</i>.
<br/>
<br/>
Je kunt ook de arrow notatie gebruiken:
<code>button.onclick = ((btn, bgclr) => () => { btn.style.backgroundColor = bgclr; })(button, bg);</code>
<br/>
<br/>
Nu nog even terug naar de situatie waarbij de closure variabelen uit de
setupButtonList <code>function</code> bevat. Hieronder is de <code>bg</code>
variabele weggelaten, de <code>onclick</code> handler in arrow notatie (maar
dus zonder speciale closure)
en overal waar het kan is <code>let</code>
vervangen door <code>var</code>.

<figure>
<div class="examples">

<textarea class="jcr-listing">
function setupButtonList()
{
   var ol = document.querySelector('#theList');
   var color = ['yellow', 'green', 'blue', 'red'];

   for (let i = 0; i < 4; i++)
   {
      var li     = document.createElement('li');
      let button = document.createElement('button');

      button.innerHTML = color[i];

      button.onclick   = () => { button.style.backgroundColor = color[i]; };

      li.appendChild(button);
      ol.appendChild(li);
   }
}
</textarea>

<ol id="xmp4"></ol>
</div>
<figcaption>Voorbeeld 4 - potentieel onveilige closure</figcaption>
</figure>

Hier komen <code>color</code> en <code>i</code> in de closure.
Het maakt niet uit of <code>color</code> via een <code>var</code> of
een <code>let</code> gedeclareerd is, z'n scope blijft hetzelfde.
Maar als je van <code>i</code> een <code>var</code> maakt heb je een probleem:

<figure>
<div class="examples">

<textarea class="jcr-listing">
function setupButtonList()
{
   var ol = document.querySelector('#theList');
   let color = ['yellow', 'green', 'blue', 'red'];

   for (var i = 0; i < 4; i++)
   {
      var li     = document.createElement('li');
      let button = document.createElement('button');

      button.innerHTML = color[i];

      button.onclick   = () => { button.style.backgroundColor = color[i]; };

      li.appendChild(button);
      ol.appendChild(li);
   }

   color.push('magenta');
}
</textarea>
<ol id="xmp5"></ol>
</div>
<figcaption>Voorbeeld 5 - <code>for</code> loop variabele in <code>function</code> scope en in closure</figcaption>
</figure>

In tegenstelling tot een <code>let i</code> heeft een <code>var i</code>
<i>geen lokale scope</i> in de <code>for</code> loop,
maar de scope van de setupButtonList <code>function</code>.
In de closure wordt hij daarom uiteindelijk 4 en dat zou
een <code>undefined</code> waarde voor <code>color[i]</code> opleveren.
In het voorbeeld is een <code>color[4]</code> in de closure toegevoegd
zodat er alsnog een kleurtje op elke button komt.



</div> <!-- jcr-layout-main -->

<div class="jcr-layout-right"></div> <!-- jcr-layout-right -->

<div class="jcr-layout-footer">

<div class="jcr-copy"></div>

<!-- references -->
<h3 class="jcr-section jcr-section-nobefore" id="section_references">Referenties</h3>
<!-- refer as:
<a href="#ref_something" class="jcr-reference"></a>
   references in textarea:
#id [author]
url
text
[origin (website)]
   separate references with empty lines
-->

<textarea class="jcr-referred">
#ref_mdnclosures
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures
Closures
MDN web docs

#ref_wikifunarg
https://en.wikipedia.org/wiki/Funarg_problem
Funarg problem
Wikipedia

#ref_mdnstrict
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
Strict mode
MDN web docs
</textarea>

</div> <!-- jcr-layout-footer -->

</div> <!-- jcr-layout -->
</body>
</html>
